"""
CLI Interface f√ºr AutoGraph
"""

import click
import logging
from pathlib import Path
from typing import Optional

from .config import AutoGraphConfig
from .core.pipeline import AutoGraphPipeline
from .extractors.text import TextExtractor
from .processors.ner import NERProcessor
from .storage.neo4j import Neo4jStorage


def setup_logging(level: str = "INFO"):
    """Konfiguriert Logging"""
    logging.basicConfig(
        level=getattr(logging, level.upper()),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(), logging.FileHandler("autograph.log")],
    )


@click.group()
@click.option(
    "--config", "-c", type=click.Path(exists=True), help="Pfad zur Konfigurationsdatei"
)
@click.option(
    "--log-level", default="INFO", help="Log Level (DEBUG, INFO, WARNING, ERROR)"
)
@click.pass_context
def cli(ctx, config: Optional[str], log_level: str):
    """AutoGraph - Automatische Knowledge Graph Generierung"""
    setup_logging(log_level)

    ctx.ensure_object(dict)

    if config:
        ctx.obj["config"] = AutoGraphConfig.from_file(Path(config))
    else:
        ctx.obj["config"] = None


@cli.command()
@click.argument("source", type=click.Path(exists=True))
@click.option("--output", "-o", type=click.Path(), help="Output Verzeichnis")
@click.option(
    "--format", "output_format", default="json", help="Output Format (json, csv)"
)
@click.pass_context
def extract(ctx, source: str, output: Optional[str], output_format: str):
    """Extrahiert Daten aus Quelle"""
    click.echo(f"Extrahiere Daten aus: {source}")

    # Einfacher Text-Extraktor f√ºr Demo
    extractor = TextExtractor()
    data = extractor.extract(source)

    click.echo(f"Extrahiert: {len(data)} Datenpunkte")

    if output:
        output_path = Path(output)
        output_path.mkdir(parents=True, exist_ok=True)

        import json

        with open(output_path / f"extracted_data.{output_format}", "w") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

        click.echo(f"Daten gespeichert in: {output_path}")


@cli.command()
@click.argument("source", type=click.Path(exists=True))
@click.option("--domain", "-d", help="Zieldom√§ne (z.B. medizin, literatur)")
@click.option(
    "--processor",
    "-p",
    type=click.Choice(["ner", "relation", "both"], case_sensitive=False),
    default="both",
    help="Verarbeitungsmodus: ner (nur NER), relation (nur Beziehungen), both (beides)",
)
@click.pass_context
def run(ctx, source: str, domain: Optional[str], processor: str):
    """F√ºhrt komplette AutoGraph Pipeline aus"""
    config = ctx.obj.get("config")

    if not config:
        click.echo("Keine Konfiguration gefunden. Verwende Standard-Konfiguration.")
        # Minimal-Konfiguration f√ºr Demo
        from .config import Neo4jConfig

        config = AutoGraphConfig(
            project_name="demo",
            neo4j=Neo4jConfig(password="password"),  # Sollte aus Umgebung kommen
        )

    click.echo(f"Starte AutoGraph Pipeline f√ºr: {source}")
    if domain:
        click.echo(f"Zieldom√§ne: {domain}")
    click.echo(f"Verarbeitungsmodus: {processor}")

    try:
        # Pipeline-Komponenten initialisieren
        extractor = TextExtractor(config.extractor.model_dump())

        # Prozessoren basierend auf Auswahl
        processors = []
        if processor in ["ner", "both"]:
            processors.append(NERProcessor(config.processor.model_dump()))
        if processor in ["relation", "both"]:
            from .processors import RelationExtractor

            processors.append(RelationExtractor(config.processor.model_dump()))

        storage = Neo4jStorage(config.neo4j.model_dump())

        # Pipeline ausf√ºhren
        pipeline = AutoGraphPipeline(
            config=config, extractor=extractor, processors=processors, storage=storage
        )

        result = pipeline.run(source, domain=domain)

        click.echo("Pipeline erfolgreich abgeschlossen!")
        click.echo(f"Entit√§ten: {len(result.entities)}")
        click.echo(f"Beziehungen: {len(result.relationships)}")

    except Exception as e:
        click.echo(f"Fehler: {str(e)}", err=True)
        raise click.ClickException(str(e))


@cli.command()
@click.option("--project-name", prompt="Projektname", help="Name des Projekts")
@click.option("--neo4j-uri", default="bolt://localhost:7687", help="Neo4j URI")
@click.option("--neo4j-user", default="neo4j", help="Neo4j Benutzername")
@click.option("--neo4j-password", prompt=True, hide_input=True, help="Neo4j Passwort")
@click.option("--output", "-o", default="autograph-config.yaml", help="Ausgabe-Datei")
def init(
    project_name: str, neo4j_uri: str, neo4j_user: str, neo4j_password: str, output: str
):
    """Erstellt eine neue AutoGraph Konfiguration"""
    from .config import Neo4jConfig

    config = AutoGraphConfig(
        project_name=project_name,
        neo4j=Neo4jConfig(uri=neo4j_uri, username=neo4j_user, password=neo4j_password),
    )

    config.to_file(Path(output))
    click.echo(f"Konfiguration erstellt: {output}")


@cli.command()
@click.pass_context
def menu(ctx):
    """Interaktives Men√º f√ºr AutoGraph"""
    while True:
        click.echo("\n" + "=" * 50)
        click.echo("ü§ñ AutoGraph - Knowledge Graph Framework")
        click.echo("=" * 50)
        click.echo("1. üìÑ Text verarbeiten (NER + Beziehungen)")
        click.echo("2. üß† Nur NER (Named Entity Recognition)")
        click.echo("3. üîó Nur Beziehungsextraktion")
        click.echo("4. üóÇÔ∏è  Datenbank anzeigen")
        click.echo("5. üóëÔ∏è  Datenbank l√∂schen")
        click.echo("6. üÜï Neue Datenbank erstellen")
        click.echo("7. ‚öôÔ∏è  Konfiguration anzeigen")
        click.echo("8. üìä Statistiken anzeigen")
        click.echo("0. ‚ùå Beenden")
        click.echo("-" * 50)

        choice = click.prompt("Ihre Auswahl", type=int)

        if choice == 0:
            click.echo("Auf Wiedersehen! üëã")
            break
        elif choice == 1:
            _menu_process_text(ctx, "both")
        elif choice == 2:
            _menu_process_text(ctx, "ner")
        elif choice == 3:
            _menu_process_text(ctx, "relation")
        elif choice == 4:
            _menu_show_database(ctx)
        elif choice == 5:
            _menu_clear_database(ctx)
        elif choice == 6:
            _menu_create_database(ctx)
        elif choice == 7:
            _menu_show_config(ctx)
        elif choice == 8:
            _menu_show_stats(ctx)
        else:
            click.echo("‚ùå Ung√ºltige Auswahl!")


def _menu_process_text(ctx, processor_mode: str):
    """Men√º f√ºr Textverarbeitung"""
    file_path = click.prompt("üìÑ Pfad zur Textdatei", type=click.Path(exists=True))
    domain = click.prompt(
        "üéØ Dom√§ne (optional, Enter f√ºr keine)", default="", show_default=False
    )

    if domain == "":
        domain = None

    click.echo(f"\nüöÄ Starte Verarbeitung...")
    ctx.invoke(run, source=file_path, domain=domain, processor=processor_mode)


def _menu_show_database(ctx):
    """Zeigt Datenbankinhalte an"""
    try:
        config = ctx.obj.get("config")
        if not config:
            click.echo("‚ùå Keine Konfiguration gefunden!")
            return

        storage = Neo4jStorage(config.neo4j.model_dump())

        # Einfache Cypher-Abfrage f√ºr √úbersicht
        click.echo("\nüìä Datenbank-√úbersicht:")
        click.echo("-" * 30)

        # Entit√§ten z√§hlen
        entity_query = "MATCH (n) RETURN count(n) as entity_count"
        entity_result = storage._execute_query(entity_query)
        entity_count = entity_result[0]["entity_count"] if entity_result else 0

        # Beziehungen z√§hlen
        rel_query = "MATCH ()-[r]->() RETURN count(r) as rel_count"
        rel_result = storage._execute_query(rel_query)
        rel_count = rel_result[0]["rel_count"] if rel_result else 0

        click.echo(f"üî∏ Entit√§ten: {entity_count}")
        click.echo(f"üîó Beziehungen: {rel_count}")

        if entity_count > 0:
            # Beispiel-Entit√§ten anzeigen
            sample_query = (
                "MATCH (n) RETURN n.text as text, labels(n)[0] as label LIMIT 5"
            )
            samples = storage._execute_query(sample_query)

            click.echo(f"\nüìã Beispiel-Entit√§ten:")
            for sample in samples:
                click.echo(f"  ‚Ä¢ {sample['text']} ({sample['label']})")

    except Exception as e:
        click.echo(f"‚ùå Fehler beim Datenbankzugriff: {str(e)}")


def _menu_clear_database(ctx):
    """L√∂scht alle Daten aus der Datenbank"""
    if click.confirm("‚ö†Ô∏è  M√∂chten Sie wirklich ALLE Daten aus der Datenbank l√∂schen?"):
        try:
            config = ctx.obj.get("config")
            if not config:
                click.echo("‚ùå Keine Konfiguration gefunden!")
                return

            storage = Neo4jStorage(config.neo4j.model_dump())

            # Alle Daten l√∂schen
            clear_query = "MATCH (n) DETACH DELETE n"
            storage._execute_query(clear_query)

            click.echo("‚úÖ Datenbank erfolgreich geleert!")

        except Exception as e:
            click.echo(f"‚ùå Fehler beim L√∂schen: {str(e)}")
    else:
        click.echo("Abgebrochen.")


def _menu_create_database(ctx):
    """Erstellt Datenbank-Constraints und Indizes"""
    try:
        config = ctx.obj.get("config")
        if not config:
            click.echo("‚ùå Keine Konfiguration gefunden!")
            return

        storage = Neo4jStorage(config.neo4j.model_dump())

        click.echo("üÜï Erstelle Datenbank-Schema...")

        # Constraints f√ºr bessere Performance
        constraints = [
            "CREATE CONSTRAINT entity_text_unique IF NOT EXISTS FOR (e:Entity) REQUIRE e.text IS UNIQUE",
            "CREATE INDEX entity_label_index IF NOT EXISTS FOR (e:Entity) ON (e.label)",
            "CREATE INDEX entity_source_index IF NOT EXISTS FOR (e:Entity) ON (e.source)",
        ]

        for constraint in constraints:
            try:
                storage._execute_query(constraint)
                click.echo(f"‚úÖ {constraint.split()[1]} erstellt")
            except Exception as e:
                if "already exists" in str(e).lower():
                    click.echo(f"‚ÑπÔ∏è  {constraint.split()[1]} existiert bereits")
                else:
                    click.echo(f"‚ùå Fehler: {str(e)}")

        click.echo("‚úÖ Datenbank-Schema erfolgreich erstellt!")

    except Exception as e:
        click.echo(f"‚ùå Fehler beim Schema-Setup: {str(e)}")


def _menu_show_config(ctx):
    """Zeigt aktuelle Konfiguration an"""
    config = ctx.obj.get("config")
    if not config:
        click.echo("‚ùå Keine Konfiguration geladen!")
        return

    click.echo("\n‚öôÔ∏è  Aktuelle Konfiguration:")
    click.echo("-" * 30)
    click.echo(f"üìã Projekt: {config.project_name}")
    click.echo(f"üîó Neo4j URI: {config.neo4j.uri}")
    click.echo(f"üë§ Neo4j User: {config.neo4j.username}")
    click.echo(f"ü§ñ LLM URL: {config.llm.base_url}")
    click.echo(f"üß† LLM Modell: {config.llm.model}")
    click.echo(f"üìù NER Modell: {config.processor.ner_model}")


def _menu_show_stats(ctx):
    """Zeigt detaillierte Statistiken an"""
    try:
        config = ctx.obj.get("config")
        if not config:
            click.echo("‚ùå Keine Konfiguration gefunden!")
            return

        storage = Neo4jStorage(config.neo4j.model_dump())

        click.echo("\nüìä Detaillierte Statistiken:")
        click.echo("-" * 40)

        # Entit√§ten nach Typ
        type_query = """
        MATCH (n:Entity) 
        RETURN n.label as entity_type, count(*) as count 
        ORDER BY count DESC
        """
        types = storage._execute_query(type_query)

        if types:
            click.echo("üè∑Ô∏è  Entit√§ten nach Typ:")
            for type_info in types:
                click.echo(f"  ‚Ä¢ {type_info['entity_type']}: {type_info['count']}")

        # Beziehungen nach Typ
        rel_type_query = """
        MATCH ()-[r]->() 
        RETURN type(r) as rel_type, count(*) as count 
        ORDER BY count DESC
        """
        rel_types = storage._execute_query(rel_type_query)

        if rel_types:
            click.echo(f"\nüîó Beziehungen nach Typ:")
            for rel_info in rel_types:
                click.echo(f"  ‚Ä¢ {rel_info['rel_type']}: {rel_info['count']}")

    except Exception as e:
        click.echo(f"‚ùå Fehler beim Abrufen der Statistiken: {str(e)}")


def main():
    """Entry point f√ºr die CLI"""
    cli()


if __name__ == "__main__":
    main()
